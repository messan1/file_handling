"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.authorize = exports.UnsupportedApplicationKeyId = exports.BadCredentials = void 0;
const tslib_1 = require("tslib");
const errors_1 = tslib_1.__importDefault(require("../errors"));
const b2_1 = tslib_1.__importDefault(require("../b2"));
const node_fetch_1 = tslib_1.__importDefault(require("node-fetch"));
/** The applicationKeyId and/or the applicationKey are wrong. */
class BadCredentials extends errors_1.default {
}
exports.BadCredentials = BadCredentials;
/** The applicationKeyId is valid, but cannot be used with this version of the B2 API. */
class UnsupportedApplicationKeyId extends errors_1.default {
}
exports.UnsupportedApplicationKeyId = UnsupportedApplicationKeyId;
/** @internal */
async function authorize({ applicationKeyId, applicationKey }) {
    const combinedCredentials = Buffer.from(applicationKeyId + ":" + applicationKey, "utf-8").toString("base64");
    const res = await node_fetch_1.default(`https://api.backblazeb2.com/b2api/${b2_1.default.apiVersion}/b2_authorize_account`, {
        headers: {
            "Authorization": `Basic ${combinedCredentials}`,
            "User-Agent": b2_1.default.userAgent,
        }
    });
    if (res.status === 200) {
        const data = await res.json();
        return data;
    }
    else {
        const data = await res.json();
        switch (data.code) {
            case "bad_request": throw new errors_1.default.BadRequest(data);
            case "unauthorized": throw new BadCredentials(data);
            case "unsupported": throw new UnsupportedApplicationKeyId(data);
            case "transaction_cap_exceeded": throw new errors_1.default.UsageCapExceeded(data);
            default: throw new errors_1.default.UnknownServerError(data);
        }
    }
}
exports.authorize = authorize;
//# sourceMappingURL=authorize-account.js.map