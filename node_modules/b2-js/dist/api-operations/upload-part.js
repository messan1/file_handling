"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const errors_1 = tslib_1.__importDefault(require("../errors"));
const node_fetch_1 = tslib_1.__importDefault(require("node-fetch"));
const b2_1 = tslib_1.__importDefault(require("../b2"));
/** @internal */
async function uploadPart(partNumber, buffer, sha1, _uploadUrl, getUploadUrl, maxRetries = 5, backoffRate = 150, retryN = 0) {
    if (typeof _uploadUrl === "undefined")
        _uploadUrl = await getUploadUrl();
    const { uploadUrl, authorizationToken } = _uploadUrl;
    const res = await node_fetch_1.default(uploadUrl, {
        method: "POST",
        headers: {
            Authorization: authorizationToken,
            "X-Bz-Content-Sha1": sha1,
            "X-Bz-Part-Number": partNumber.toString(),
            "Content-Length": buffer.byteLength.toString(),
            "User-Agent": b2_1.default.userAgent,
        },
        body: buffer,
    });
    const data = await res.json();
    switch (res.status) {
        case 200:
            return { data, url: _uploadUrl };
        case 401: /** auth expired - get a new upload url */
            if (retryN > maxRetries)
                throw new errors_1.default.UnauthorizedRequest(data);
        case 503: /** service unavailable - get a new upload url */
            if (retryN > maxRetries)
                throw new errors_1.default.ServiceUnavailable(data);
            return uploadPart(partNumber, buffer, sha1, await getUploadUrl(), getUploadUrl, maxRetries, backoffRate, retryN + 1);
        case 408: /** timeout, exponential back-off */
            if (retryN > maxRetries)
                throw new errors_1.default.RequestTimeout(data);
            return new Promise((res) => {
                setTimeout(async () => {
                    res(uploadPart(partNumber, buffer, sha1, _uploadUrl, getUploadUrl, maxRetries, backoffRate, retryN + 1));
                }, backoffRate * Math.pow(2, retryN));
            });
        default:
            throw new errors_1.default.UnknownServerError(data);
    }
}
exports.default = uploadPart;
//# sourceMappingURL=upload-part.js.map