"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BackblazeLibraryError = void 0;
class BackblazeLibraryError extends Error {
}
exports.BackblazeLibraryError = BackblazeLibraryError;
(function (BackblazeLibraryError) {
    class BadUsage extends Error {
    }
    BackblazeLibraryError.BadUsage = BadUsage;
    class Internal extends Error {
    }
    BackblazeLibraryError.Internal = Internal;
    class FileNotFound extends Error {
    }
    BackblazeLibraryError.FileNotFound = FileNotFound;
})(BackblazeLibraryError = exports.BackblazeLibraryError || (exports.BackblazeLibraryError = {}));
class BackblazeServerError extends BackblazeLibraryError {
    constructor(apiData) {
        super(apiData.message);
        this.apiData = apiData;
    }
}
(function (BackblazeServerError) {
    class UnknownServerError extends BackblazeServerError {
    }
    BackblazeServerError.UnknownServerError = UnknownServerError;
    /**
     * The request had the wrong fields or illegal values.
     * The message returned with the error will describe the problem.
     */
    class BadRequest extends BackblazeServerError {
    }
    BackblazeServerError.BadRequest = BadRequest;
    class UsageCapExceeded extends BackblazeServerError {
    }
    BackblazeServerError.UsageCapExceeded = UsageCapExceeded;
    class DownloadCapExceeded extends UsageCapExceeded {
    }
    BackblazeServerError.DownloadCapExceeded = DownloadCapExceeded;
    /** The auth token is valid, but does not allow you to make this call with these parameters */
    class UnauthorizedRequest extends BackblazeServerError {
    }
    BackblazeServerError.UnauthorizedRequest = UnauthorizedRequest;
    /** We normally try to reauthorize once before throwing this.  */
    class ExpiredCredentials extends BackblazeServerError {
    }
    BackblazeServerError.ExpiredCredentials = ExpiredCredentials;
    /** You have a reached a storage cap limit, or account access may be impacted in some other way; see the human-readable message. */
    class Forbidden extends BackblazeServerError {
    }
    BackblazeServerError.Forbidden = Forbidden;
    /** The service timed out trying to read your request. */
    class RequestTimeout extends BackblazeServerError {
    }
    BackblazeServerError.RequestTimeout = RequestTimeout;
    /** B2 may limit API requests on a per-account basis. */
    class TooManyRequests extends BackblazeServerError {
    }
    BackblazeServerError.TooManyRequests = TooManyRequests;
    class InternalServerError extends BackblazeServerError {
    }
    BackblazeServerError.InternalServerError = InternalServerError;
    class RangeNotSatisfiable extends BackblazeServerError {
    }
    BackblazeServerError.RangeNotSatisfiable = RangeNotSatisfiable;
    class ServiceUnavailable extends BackblazeServerError {
    }
    BackblazeServerError.ServiceUnavailable = ServiceUnavailable;
})(BackblazeServerError || (BackblazeServerError = {}));
exports.default = BackblazeServerError;
//# sourceMappingURL=errors.js.map