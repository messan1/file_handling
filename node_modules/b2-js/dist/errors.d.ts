export declare class BackblazeLibraryError extends Error {
}
export declare namespace BackblazeLibraryError {
    class BadUsage extends Error {
    }
    class Internal extends Error {
    }
    class FileNotFound extends Error {
    }
}
declare class BackblazeServerError extends BackblazeLibraryError {
    readonly apiData: BackblazeErrorResponse;
    constructor(apiData: BackblazeErrorResponse);
}
export interface BackblazeErrorResponse {
    status: number;
    code: string;
    message: string;
}
declare namespace BackblazeServerError {
    class UnknownServerError extends BackblazeServerError {
    }
    /**
     * The request had the wrong fields or illegal values.
     * The message returned with the error will describe the problem.
     */
    class BadRequest extends BackblazeServerError {
    }
    class UsageCapExceeded extends BackblazeServerError {
    }
    class DownloadCapExceeded extends UsageCapExceeded {
    }
    /** The auth token is valid, but does not allow you to make this call with these parameters */
    class UnauthorizedRequest extends BackblazeServerError {
    }
    /** We normally try to reauthorize once before throwing this.  */
    class ExpiredCredentials extends BackblazeServerError {
    }
    /** You have a reached a storage cap limit, or account access may be impacted in some other way; see the human-readable message. */
    class Forbidden extends BackblazeServerError {
    }
    /** The service timed out trying to read your request. */
    class RequestTimeout extends BackblazeServerError {
    }
    /** B2 may limit API requests on a per-account basis. */
    class TooManyRequests extends BackblazeServerError {
    }
    class InternalServerError extends BackblazeServerError {
    }
    class RangeNotSatisfiable extends BackblazeServerError {
    }
    class ServiceUnavailable extends BackblazeServerError {
    }
}
export default BackblazeServerError;
//# sourceMappingURL=errors.d.ts.map