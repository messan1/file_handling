/// <reference types="node" />
import { Writable } from "stream";
import B2 from "./b2";
import File, { FileUploadOptions } from "./file";
declare class PendingPart extends Writable {
    private readonly chunks;
    private readonly hash;
    bytes: number;
    _write(chunk: Buffer, _: any, callback: (err?: Error) => void): void;
    digest: string;
    concat(): Buffer;
    _final(cb: (err?: Error) => void): void;
}
/** @internal */
export default class FileUploadStream extends Writable {
    static maximumPartSize?: number;
    readonly file: File;
    readonly b2: B2;
    pendingPart: PendingPart;
    private _isMultipart;
    readonly options: FileUploadOptions;
    constructor(file: File, options?: FileUploadOptions);
    __process(chunk: Buffer, callback: (error?: Error | null) => void): void;
    _write(chunk: Buffer, _encoding: BufferEncoding, callback: (error?: Error | null) => void): void;
    _final(cb: (error?: Error | null) => void): void;
    private readonly _uploadDigestPromises;
    private readonly uploadUrls;
    private uploadPart;
    private _uploadAsSinglePart;
    private _finishUpload;
    private _finishMultipart;
    /** @private */
    private _getMultipartUploadUrl;
}
export {};
//# sourceMappingURL=file-upload-stream.d.ts.map