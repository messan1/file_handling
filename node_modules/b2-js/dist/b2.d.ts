import { RequestInit, Response } from "node-fetch";
import { B2Credentials } from "./api-operations/authorize-account";
import Bucket, { MinimumBucketInfo } from "./bucket";
interface RequestOptions {
    maxRetries?: number;
    backoff?: number;
}
export default class B2 {
    private credentials;
    private auth;
    private _userSetPartSize?;
    /**
     * Backblaze allows uploading files as a single-part or as multiple parts.
     * However, you must know the length of each file in advance, and you cannot
     * use chunked-encoding. Single-part uploads are generally faster for smaller files.
     * Backblaze recommends a part-size, which is automatically used.
     *
     * Each part must be read into memory.
     *
     * You can configure this, to a minimum of `b2.auth.absoluteMinimumPartSize`.
     */
    get partSize(): number;
    set partSize(size: number);
    static readonly apiVersion: string;
    static readonly userAgent: string;
    private constructor();
    private authorize;
    /**
     * Create a new B2 client by authorizing with the API.
     *
     * ```js
     * import B2 from "./src/b2";
     *
     * const b2 = await B2.authorize({
     *   applicationKeyId: "KEY_ID",
     *   applicationKey: "SECRET_KEY"
     * });
     * ```
     */
    static authorize(credentials: B2Credentials): Promise<B2>;
    /** @internal */
    static uriEncodeString(decoded: string): string;
    /** @internal */
    static uriDecodeString(encoded: string): string;
    private request;
    /** Call a b2 operation by name */
    callApi(operationName: string, request: RequestInit, opts?: RequestOptions): Promise<Response>;
    /** @internal */
    callDownloadApi(operationName: string, request: RequestInit, opts?: RequestOptions): Promise<Response>;
    /** @internal */
    requestFromDownloadFileByName(bucketName: string, fileName: string, request: RequestInit, opts?: RequestOptions): Promise<Response>;
    /**
     * Get a bucket by name.
     *
     * ```js
     * const bucket = await b2.bucket("js-testing-bucket");
     * ```
     */
    bucket(name: string): Promise<Bucket>;
    /**
     * Get a bucket by id.
     *
     * ```js
     * const bucket = await b2.bucket({bucketId: "BUCKET_ID"});
     * ```
     */
    bucket(info: MinimumBucketInfo): Promise<Bucket>;
}
export {};
//# sourceMappingURL=b2.d.ts.map